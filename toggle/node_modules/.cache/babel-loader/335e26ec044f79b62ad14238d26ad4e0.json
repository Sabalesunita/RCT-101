{"ast":null,"code":"var _jsxFileName = \"C:\\\\GitHub\\\\RCT-101\\\\toggle\\\\src\\\\contexts\\\\themeContext.jsx\",\n    _s = $RefreshSig$();\n\nimport { createContext } from \"react\";\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ThemeContext = /*#__PURE__*/createContext();\n\nconst ThemeContextProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [theme, setTheme] = useState(\"Light\");\n\n  const handleThemeChange = () => {\n    setTheme(theme === \"Light\" ? \"Dark\" : \"Light\");\n  };\n\n  return /*#__PURE__*/_jsxDEV(ThemeContext.Provider, {\n    value: {\n      theme,\n      handleThemeChange\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ThemeContextProvider, \"7iWQ0/3SsWuBoSze1XszSbzRqbc=\");\n\n_c = ThemeContextProvider;\nexport { ThemeContext, ThemeContextProvider };\n\nvar _c;\n\n$RefreshReg$(_c, \"ThemeContextProvider\");","map":{"version":3,"sources":["C:/GitHub/RCT-101/toggle/src/contexts/themeContext.jsx"],"names":["createContext","useState","ThemeContext","ThemeContextProvider","children","theme","setTheme","handleThemeChange"],"mappings":";;;AAAA,SAASA,aAAT,QAA8B,OAA9B;AACA,SAASC,QAAT,QAAyB,OAAzB;;AACA,MAAMC,YAAY,gBAAGF,aAAa,EAAlC;;AAEA,MAAMG,oBAAoB,GAAG,QAAkB;AAAA;;AAAA,MAAjB;AAAEC,IAAAA;AAAF,GAAiB;AAE3C,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBL,QAAQ,CAAC,OAAD,CAAlC;;AAEA,QAAMM,iBAAiB,GAAG,MAAM;AAC5BD,IAAAA,QAAQ,CAACD,KAAK,KAAK,OAAV,GAAoB,MAApB,GAA6B,OAA9B,CAAR;AACH,GAFD;;AAIA,sBACI,QAAC,YAAD,CAAc,QAAd;AAAuB,IAAA,KAAK,EAAE;AAAEA,MAAAA,KAAF;AAASE,MAAAA;AAAT,KAA9B;AAAA,cACKH;AADL;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH,CAbD;;GAAMD,oB;;KAAAA,oB;AAeN,SAASD,YAAT,EAAuBC,oBAAvB","sourcesContent":["import { createContext } from \"react\";\r\nimport { useState } from \"react\";\r\nconst ThemeContext = createContext();\r\n\r\nconst ThemeContextProvider = ({ children }) => {\r\n\r\n    const [theme, setTheme] = useState(\"Light\");\r\n\r\n    const handleThemeChange = () => {\r\n        setTheme(theme === \"Light\" ? \"Dark\" : \"Light\")\r\n    }\r\n\r\n    return (\r\n        <ThemeContext.Provider value={{ theme, handleThemeChange}}>\r\n            {children}\r\n            </ThemeContext.Provider>\r\n    )\r\n}\r\n\r\nexport { ThemeContext, ThemeContextProvider };"]},"metadata":{},"sourceType":"module"}